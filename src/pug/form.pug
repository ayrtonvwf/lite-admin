extends layout.pug

block content
    h1.content-title
        i.material-icons keyboard
        | Forms
    article.box
        .box-body
            h2#validation_indicators Validation indicators
            p
                | Just include a
                |
                code #{'<span class="counter-invalid-fields"></span>'}
                |
                | inside a form and you have the number of invalid fields.
                | The same goes with
                |
                code #{'<span class="counter-valid-fields"></span>'}
                | .
            p You can also add the class #[code form-valid] and #[code form-invalid] to any element inside a #[code form] and it will be shown only when the form is valid or invalid.
            p Try it yourself:
            br
            form
                .row.justify-content-center
                    .col-6.col-sm-4
                        label(for='required-input') Required field
                        input#required-input(placeholder='Type anything here' required)
                    .col-6.col-sm-4
                        label(for='select') Required select
                        select#required-select(required)
                            option(value='' selected hidden disabled) Select...
                            option(value='1') Teste 1
                            option(value='2') Teste 2
                            option(value='3') Teste 3
                .row.justify-content-center
                    .col-6.col-sm-4
                        label(for='required-number') Number between 5 and 9
                        input#required-number(type='number' placeholder='Numeric input' required min='5' max='9')
                    .col-6.col-sm-4.text-center
                        .form-valid-supported
                            button.btn-lg.btn-success.form-valid(type='submit')
                                i.material-icons check
                                | Submit
                            button.btn-lg.btn-success.disabled.form-invalid(type='submit')
                                i.material-icons warning
                                | Submit
                        .form-valid-unsupported
                            button.btn-lg.btn-success(type='submit')
                                i.material-icons check
                                | Submit

                br
                .row.justify-content-center
                    .col-sm-8
                        .text-bold.text-center
                            .row
                                .col-6
                                    .alert-info.counter-invalid-fields Invalid fields: #{' '}
                                .col-6
                                    .alert-info.counter-valid-fields Valid fields: #{' '}
                            .show-on-form-valid-support
                                .form-valid
                                    .alert-success Ready to submit!
                                .form-invalid
                                    .alert-danger Has validation errors!
            br
            h3 Browser support
            p At the moment of writing, Internet Explorer and Edge doesn't support the #[code :valid] pseudoclass on the #[code form] tag. You can use the classes #[code form-valid-supported] and #[code form-valid-unsupported] to show or hide an element based on browser support of this feature.
            .row.justify-content-center
                .col-sm-10.col-md-8.col-lg-6.text-center
                    .form-valid-supported
                        .alert-success Your browser supports the #[code :valid] pseudoclass on the #[code form] tag!
                    .form-valid-unsupported
                        .alert-danger Your browser doesn't support the #[code :valid] pseudoclass on the #[code form] tag.
            hr
            h2#auto_required Auto required hints
            p We can auto-add asterisks ( * ) to the label of required fields! Here's how to do this:
            ol
                li add a #[code mark-required] class to your form;
                li add a #[code #{'<div class="input">'}] wrapping your label and your input
                li put the #[code input] before the #[code label]
            pre
                code.
                    #{'<form class="mark-required">'}#[br]
                    &nbsp;&nbsp;#{'<div class="input">'}#[br]
                    &nbsp;&nbsp;&nbsp;&nbsp;#{'<input required>'}#[br]
                    &nbsp;&nbsp;&nbsp;&nbsp;#{'<label>My required label</label>'}#[br]
                    &nbsp;&nbsp;#{'</div>'}#[br]
                    #{'</form>'}
            p #[b Why would you ever do this?]
            ul
                li Once you get used to it, it becomes less weird;
                li You won't need to put that * on every label. No more "little mistakes";
                li If you use JS to toggle the input's required on or off, you don't need to worry about this label. It auto adjusts!
            p Finally, here's the demo:
            form.mark-required
                .row.justify-content-center
                    .input.col-10.col-sm-6.col-md-5.col-lg-4
                        input#mark-required-input(required placeholder='A required label')
                        label(for='mark-required-input') My required label
            hr
            h2#checkbox_radio Checkbox and Radio
            p.
                Do you know somebody who uses JS to build nice #[code checkbox]es and #[code radio]s? #[br]
                You don't need any extra markup or class, just use them!
            .row.justify-content-center
                .col-sm-4
                    fieldset
                        legend Checkbox
                        div
                            label
                                input(type='checkbox')
                                | Option 1
                        div
                            label
                                input(type='checkbox')
                                | Option 2
                        div
                            label
                                input(type='checkbox')
                                | Option 3
                .col-sm-4
                    fieldset
                        legend Radio
                        div
                            label
                                input(type='radio' name='radio')
                                | Option 1
                        div
                            label
                                input(type='radio' name='radio')
                                | Option 2
                        div
                            label
                                input(type='radio' name='radio')
                                | Option 3
            p By the way, this is how our #[code fieldset] looks :)
            hr
            h2 Textarea resize
            p You have four classes to control the resizing of #[code textarea]s:
            .row.justify-content-center
                .col-12.col-sm-4
                    label(for='textarea-no-resize') No resize
                    textarea#textarea-no-resize.no-resize(placeholder='<textarea class="no-resize"></textarea>')
                .col-12.col-sm-4
                    label(for='textarea-resize-both') Resize both
                    textarea#textarea-resize-both.resize-both(placeholder='<textarea class="resize-both"></textarea>')
            .row.justify-content-center
                .col-12.col-sm-4
                    label(for='textarea-resize-v') Resize vertically
                    textarea#textarea-resize-v.resize-v(placeholder='<textarea class="resize-v"></textarea>')
                .col-12.col-sm-4
                    label(for='textarea-resize-h') Resize horizontally
                    textarea#textarea-resize-h.resize-h(placeholder='<textarea class="resize-h"></textarea>')
            hr
            h2 File input
            p You can have nice file inputs too. Just create a #[code label] with a button class, and put the #[code input] inside it.
            p In Chrome the default file input button is hidden, but in other browsers there's still no way to do this. However, you can add the class #[code hidden] to you input, so only the external button will be visible, but the file name will be hidden too as it is part of the #[code input] itself.
            p Be sure to check the example bellow in Chrome and other browsers to be sure which one you wanna choose.
            br
            .row.justify-content-center
                .col-6.col-md-5.col-lg-4.input
                    label(for='shown-file') Visible input
                    label.btn-primary
                        i.material-icons insert_drive_file
                        | Selecione um arquivo
                        input#shown-file(type='file')
                .col-6.col-md-5.col-lg-4.input
                    label(for='hidden-file') Hidden input
                    label.btn-primary
                        i.material-icons insert_drive_file
                        | Selecione um arquivo
                        input.hidden#hidden-file(type='file')
            br
            hr
            h2 Regular inputs
            p As expected, you can simply use your #[code input]s, #[code select]s and #[code textarea]s and they will look fine. No extra classes needed:
            br
            .row.justify-content-center
                .col-6.col-sm-4.input
                    label(for='input') A regular text field
                    input#input(placeholder='with a regular placeholder')
                .col-6.col-sm-4.input
                    label(for='select') A nice select
                    select#select
                        option(selected hidden disabled) Select...
                        option Teste 1
                        option Teste 2
                        option Teste 3
            .row.justify-content-center
                .col-6.col-sm-4.input
                    label(for='date') A date input
                    input#date(type='date' placeholder='Choose a date')
                .col-6.col-sm-4.input
                    label(for='range') A range input
                    input#range(type='range')